/*
* this is 0/1 knapsack using Memoization
* */
public class Knapsack {

    public static void main(String[] args) {
        int[] val = {1, 4, 4, 10};
        int[] weight = {1, 3, 4, 7};
        int W = 7;
        System.out.println("Maximum profit : " + knapsack(val , weight , W , weight.length));
    }

    public static int knapsack(int[] val , int[] weight , int W , int n){
        int[][] t = new int[n+1][W+1];
        for(int i = 0 ; i < n+1 ; i++){
            for(int j = 0 ; j < W+1 ; j++){
                if(i == 0 || j == 0){
                    t[i][j] = 0;
                }
            }
        }

        for(int i = 1 ; i < n+1 ; i++){
            for(int j = 1 ; j < W+1 ; j++){
                if(weight[i-1] <= j){
                    t[i][j] = Math.max(val[i-1] + t[i-1][j-weight[i-1]] , t[i-1][j]);
                } else{
                    t[i][j] = t[i-1][j];
                }
            }
        }

        return t[n][W];
    }
}
